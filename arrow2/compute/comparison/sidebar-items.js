initSidebarItems({"fn":[["can_eq","Returns whether a [`DataType`] is comparable (either array or scalar) comparison."],["can_gt","Returns whether a [`DataType`] is comparable (either array or scalar) comparison."],["can_gt_eq","Returns whether a [`DataType`] is comparable (either array or scalar) comparison."],["can_lt","Returns whether a [`DataType`] is comparable (either array or scalar) comparison."],["can_lt_eq","Returns whether a [`DataType`] is comparable (either array or scalar) comparison."],["can_neq","Returns whether a [`DataType`] is comparable (either array or scalar) comparison."],["eq","`==` between two [`Array`]s. Use [`can_eq`] to check whether the operation is valid"],["eq_scalar","`==` between an [`Array`] and a [`Scalar`]. Use [`can_eq`] to check whether the operation is valid"],["gt","`>` between two [`Array`]s. Use [`can_gt`] to check whether the operation is valid"],["gt_eq","`>=` between two [`Array`]s. Use [`can_gt_eq`] to check whether the operation is valid"],["gt_eq_scalar","`>=` between an [`Array`] and a [`Scalar`]. Use [`can_gt_eq`] to check whether the operation is valid"],["gt_scalar","`>` between an [`Array`] and a [`Scalar`]. Use [`can_gt`] to check whether the operation is valid"],["lt","`<` between two [`Array`]s. Use [`can_lt`] to check whether the operation is valid"],["lt_eq","`<=` between two [`Array`]s. Use [`can_lt_eq`] to check whether the operation is valid"],["lt_eq_scalar","`<=` between an [`Array`] and a [`Scalar`]. Use [`can_lt_eq`] to check whether the operation is valid"],["lt_scalar","`<` between an [`Array`] and a [`Scalar`]. Use [`can_lt`] to check whether the operation is valid"],["neq","`!=` between two [`Array`]s. Use [`can_neq`] to check whether the operation is valid"],["neq_scalar","`!=` between an [`Array`] and a [`Scalar`]. Use [`can_neq`] to check whether the operation is valid"]],"mod":[["binary","Comparison functions for [`BinaryArray`]"],["boolean","Comparison functions for [`BooleanArray`]"],["primitive","Comparison functions for [`PrimitiveArray`]"],["utf8","Comparison functions for [`Utf8Array`]"]],"trait":[["Simd8","[`NativeType`] that supports a representation of 8 lanes"],["Simd8Lanes","Trait declaring an 8-lane multi-data."]]});