initSidebarItems({"enum":[["AnyValue",""],["ArrowDataType","The set of supported logical types. Each variant uniquely identifies a logical type, which define specific semantics to the data (e.g. how it should be represented). Each variant has a corresponding [`PhysicalType`], obtained via [`DataType::to_physical_type`], which declares the in-memory representation of data. The [`DataType::Extension`] is special in that it augments a [`DataType`] with metadata to support custom types. Use `to_logical_type` to desugar such type and return its correspoding logical type."],["DataType",""],["TimeUnit","The time units defined in Arrow."]],"struct":[["BooleanType",""],["CategoricalType",""],["DateType",""],["DatetimeType",""],["Field",""],["Float32Type",""],["Float64Type",""],["Int16Type",""],["Int32Type",""],["Int64Type",""],["Int8Type",""],["ListType",""],["Logical","Maps a logical type to a a chunked array implementation of the physical type. This saves a lot of compiler bloat and allows us to reuse functionality."],["Schema",""],["TimeType",""],["UInt16Type",""],["UInt32Type",""],["UInt64Type",""],["UInt8Type",""],["Utf8Type",""]],"trait":[["LogicalType",""],["NumericNative",""],["PolarsDataType",""],["PolarsFloatType",""],["PolarsIntegerType",""],["PolarsNumericType",""],["PolarsSingleType","Any type that is not nested"]],"type":[["BooleanChunked",""],["CategoricalChunked",""],["DateChunked",""],["DatetimeChunked",""],["Float32Chunked",""],["Float64Chunked",""],["Int16Chunked",""],["Int32Chunked",""],["Int64Chunked",""],["Int8Chunked",""],["ListChunked",""],["PlHashMap",""],["PlHashSet",""],["SchemaRef",""],["TimeChunked",""],["UInt16Chunked",""],["UInt32Chunked",""],["UInt64Chunked",""],["UInt8Chunked",""],["Utf8Chunked",""]]});